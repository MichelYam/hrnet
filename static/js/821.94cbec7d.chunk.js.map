{"version":3,"file":"static/js/821.94cbec7d.chunk.js","mappings":"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","sources":["components/Table/Index.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useAsyncDebounce, useGlobalFilter, usePagination, useSortBy, useTable } from 'react-table'\r\n\r\nimport styled, { css } from 'styled-components'\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * \r\n * @param columns array of title for table\r\n * @param data list of employee\r\n * @returns JSX Element\r\n */\r\nconst Index = ({ columns, data }: any) => {\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        page,\r\n        rows,\r\n        state,\r\n        prepareRow,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageCount: controlledPageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        setGlobalFilter,\r\n        state: { pageIndex, pageSize },\r\n    } = useTable({ columns, data, initialState: { pageIndex: 0 }, }, useGlobalFilter, useSortBy, usePagination)\r\n\r\n    const [value, setValue] = React.useState(state.globalFilter)\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [nbrElement, setnbrElement] = useState(0)\r\n    const [pagination, setPagination] = useState<(number | string)[]>([])\r\n    /**\r\n     * \r\n     * @param currentPage current page\r\n     * @param total total number of pages\r\n     * @returns array pagination\r\n     */\r\n    const getVisiblePages = (currentPage: number, total: number) => {\r\n        if (total <= 7) {\r\n            const res = [];\r\n            for (let i = 0; i < total; i++) {\r\n                res.push(i + 1);\r\n            }\r\n            return res;\r\n        } else {\r\n            if (currentPage % 5 >= 0 && currentPage > 4 && currentPage + 2 < total) {\r\n                return [1, \"...\", currentPage - 1, currentPage, currentPage + 1, \"...\", total];\r\n            } else if (currentPage % 5 >= 0 && currentPage > 4 && currentPage + 2 >= total) {\r\n                return [1, \"...\", total - 3, total - 2, total - 1, total];\r\n            } else {\r\n                return [1, 2, 3, 4, 5, \"...\", total];\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setPagination(\r\n            getVisiblePages(currentPage, controlledPageCount)\r\n        )\r\n    }, [controlledPageCount, currentPage])\r\n    useEffect(() => {\r\n        const displayPage = (currentPage: number) => {\r\n            let testest = 0\r\n            for (let i = 1; i <= currentPage; i++) {\r\n\r\n                if (i === currentPage) {\r\n                    testest += page.length\r\n                } else {\r\n                    testest += pageSize\r\n                }\r\n            }\r\n            setnbrElement(testest)\r\n        }\r\n        displayPage(currentPage)\r\n    }, [currentPage, nbrElement, page.length, pageSize])\r\n\r\n\r\n    const onChange = useAsyncDebounce(value => {\r\n        setGlobalFilter(value || undefined)\r\n    }, 200)\r\n\r\n    \r\n    return (\r\n        <StyledTableContainer>\r\n            <div className='d-flex d-flex justify-content-between'>\r\n                <StyledTableSearch className='d-flex form-group align-items-center'>\r\n                    <SearchLabel className='mr-2' htmlFor='search'>\r\n                        Search:\r\n                    </SearchLabel>\r\n                    <Input id='search' className=\"form-control\" type=\"search\" value={value || \"\"} placeholder=\"Search employee\"\r\n                        onChange={e => {\r\n                            setValue(e.target.value);\r\n                            onChange(e.target.value);\r\n                        }}\r\n                    />\r\n                </StyledTableSearch>\r\n                <StyledTableLength >\r\n                    <label className='d-flex align-items-center'>\r\n                        Show{' '}\r\n                        <Select className=\"form-select form-select-sm\"\r\n                            value={pageSize}\r\n                            onChange={e => {\r\n                                setPageSize(Number(e.target.value))\r\n                            }}>\r\n                            {[10, 25, 30, 50, 100].map(pageSize => (\r\n                                <option key={pageSize} value={pageSize}>\r\n                                    {pageSize}\r\n                                </option>\r\n                            ))}\r\n                        </Select>\r\n                        {' '} entries\r\n                    </label>\r\n                </StyledTableLength>\r\n            </div>\r\n            <StyledTable className=\"table\" {...getTableProps()}>\r\n                <StyledTableThead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <StyledTableTr {...headerGroup.getHeaderGroupProps()} >\r\n                            {headerGroup.headers.map(column => (\r\n                                <StyledTableTh scope=\"col\" {...column.getHeaderProps(column.getSortByToggleProps())} >\r\n                                    {column.render('Header')}\r\n                                    <span>\r\n                                        {column.isSorted\r\n                                            ? column.isSortedDesc\r\n                                                ? <img src=\"../assets/img/sort_desc.png\" alt=\"\" />\r\n                                                : <img src=\"../assets/img/sort_asc.png\" alt=\"\" />\r\n                                            : null\r\n                                        }\r\n                                    </span>\r\n                                </StyledTableTh>\r\n                            ))}\r\n                        </StyledTableTr>\r\n                    ))}\r\n                </StyledTableThead>\r\n                <StyledTableTbody {...getTableBodyProps()}>\r\n                    {page.map(row => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <StyledTableTr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return (\r\n                                        <StyledTableTd {...cell.getCellProps()} >\r\n                                            {cell.render('Cell')}\r\n                                        </StyledTableTd>\r\n                                    )\r\n                                })}\r\n                            </StyledTableTr>\r\n                        )\r\n                    })}\r\n                </StyledTableTbody>\r\n            </StyledTable>\r\n            <StyledTableFooter>\r\n\r\n                <TablesInfo >\r\n                    {` ${!nbrElement ? 0 : pageIndex * pageSize + 1}-${nbrElement} of ${rows.length} entries`}\r\n                </TablesInfo>\r\n                <TablesInfoPagination>\r\n                    <nav aria-label=\"Page navigation example\">\r\n                        <ul className=\"pagination\">\r\n                            <li className=\"page-item\"><button className=\"page-link\" onClick={() => {\r\n                                previousPage()\r\n                                setCurrentPage((prev) => prev - 1);\r\n                            }} disabled={!canPreviousPage}>Previous</button></li>\r\n                            {\r\n                                pagination.map((page, index, array) => (\r\n                                    <li key={index} className=\"page-item\">\r\n                                        {currentPage === page ?\r\n                                            <StyledPaginationBtn className={`page-link ${currentPage === page ? \"active\" : \"\"} `} disabled>{page}</StyledPaginationBtn>\r\n                                            :\r\n                                            page === \"...\" ?\r\n                                                <StyledPaginationBtn className=\"page-link\" key={index} disabled>{page}</StyledPaginationBtn>\r\n                                                :\r\n                                                <StyledPaginationBtn className=\"page-link\" key={index} onClick={() => {\r\n                                                    // @ts-ignore TS2564\r\n                                                    gotoPage(page - 1)\r\n                                                    // @ts-ignore TS2564\r\n                                                    setCurrentPage(page)\r\n                                                }}>\r\n                                                    {page}\r\n                                                </StyledPaginationBtn >}\r\n                                    </li>\r\n                                ))\r\n                            }\r\n                            <li className=\"page-item\"><button className=\"page-link\" onClick={() => {\r\n                                nextPage()\r\n                                setCurrentPage((prev) => prev + 1);\r\n                            }} disabled={!canNextPage}>Next</button></li>\r\n                        </ul>\r\n                    </nav>\r\n                </TablesInfoPagination>\r\n            </StyledTableFooter>\r\n        </StyledTableContainer >\r\n    )\r\n}\r\n\r\nexport default Index\r\nconst StyledTableContainer = styled.div`\r\n    position: relative;\r\n    width: 95%;\r\n`\r\nconst StyledTableLength = styled.div`\r\n`\r\nconst Select = styled.select`\r\n    margin: 0 5px;\r\n`\r\nconst StyledTableSearch = styled.div`\r\n`\r\nconst SearchLabel = styled.label`\r\n    margin: 10px 10px 10px 0;\r\n`;\r\nconst Input = styled.input`\r\n    height: 40px;\r\n`\r\nconst StyledTable = styled.table`\r\n    border-spacing: 0 15px;\r\n    border-collapse: separate;\r\n    vertical-align: middle;\r\n    border: none;\r\n    background-color: transparent;\r\n`\r\nconst StyledTableThead = styled.thead`\r\n\r\n`\r\nconst StyledTableTr = styled.tr`\r\n    height: 65px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    font-size: 15px;\r\n`\r\nconst StyledTableTbody = styled.tbody`\r\n    ${StyledTableTr}{\r\n        box-shadow: 0 2px 10px rgb(0 0 0 / 10%);\r\n        border-radius: 5px;\r\n        background-color: #FFFFFF;\r\n    }\r\n`\r\nconst StyledTableTh = styled.th`\r\n    width: 70px;\r\n    border: none;\r\n    font-size: 18px;\r\n`\r\nconst StyledTableTd = styled.td`\r\n    width: calc(100% / 9);\r\n    border: none;\r\n`\r\n\r\nconst TablesInfo = styled.div`\r\n    padding-top: 0.755em;\r\n`\r\n\r\nconst TablesInfoPagination = styled.div`\r\n    text-align: right;\r\n    padding-top: 0.25em;\r\n`\r\n\r\nconst StyledPaginationBtn = styled.button<{ bgColor?: string }>`\r\n    ${props => props.bgColor === 'true' && css`\r\n    border: 1px solid #979797;\r\n    background: linear-gradient(to bottom, #fff 0%, #dcdcdc 100%);\r\n`}\r\n`\r\nconst StyledTableFooter = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n// const StyledPaginationBtn = styled.button`\r\n//     border: none;\r\n//     min-width: 1.5em;\r\n//     padding: 0.5em 1em;\r\n//     cursor: pointer;\r\n//     background-color: #ffffff;\r\n//     &:hover{\r\n//         background-color: #DEDEDE;\r\n//     }\r\n// `\r\n\r\nIndex.prototype = {\r\n    columns: PropTypes.array.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n}"],"names":["Index","columns","data","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","rows","state","prepareRow","canPreviousPage","canNextPage","controlledPageCount","pageCount","gotoPage","nextPage","previousPage","setPageSize","setGlobalFilter","pageSize","React","globalFilter","value","setValue","useState","currentPage","setCurrentPage","nbrElement","setnbrElement","pagination","setPagination","useEffect","total","res","i","push","getVisiblePages","testest","length","displayPage","onChange","useAsyncDebounce","undefined","StyledTableContainer","className","StyledTableSearch","SearchLabel","htmlFor","Input","id","type","placeholder","e","target","StyledTableLength","Select","Number","map","StyledTable","StyledTableThead","headerGroup","StyledTableTr","getHeaderGroupProps","headers","column","StyledTableTh","scope","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","src","alt","StyledTableTbody","row","getRowProps","cells","cell","StyledTableTd","getCellProps","StyledTableFooter","TablesInfo","TablesInfoPagination","onClick","prev","disabled","index","array","StyledPaginationBtn","styled","props","bgColor","css","prototype","PropTypes"],"sourceRoot":""}